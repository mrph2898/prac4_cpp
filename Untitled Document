std::string state = "S";
        while (state != "H") {
            c = file.get();
            switch (state) {
            case "S":
                if (!isspace(c)) {
                    lexem.push_back(c);
                    if (isdigit(c)) {
                        type = LEX_NUM;
                        state = "N";
                    } else if ((c == 'i') || (c == 'j') || (c == 'k')) {
                        type = LEX_INTID;
                        state = "Z";
                    } else if ((c == 's') || (c == 't')) {
                        type = LEX_STRINGID;
                        state = "S";
                    } else if (c == 'a') {
                        state = "A";
                    } else if (c == 'f') {
                        type = LEX_FUNCTION;
                        state = "F";
                    } else if (c = '='){
                        type = LEX_ASSIGN;
                        state = "=";
                    } else {
                        std::string exc = "Unexpected character ";
                        exc.push_back(c);
                        throw std::runtime_error(exc);
                    }
                }
                break;
            case "N":
                if (isspace(c)) {
                    state = "H";
                } else if (isdigit(c)) {
                    lexem.push_back(c);
                } else {
                    std::string exc = "Unexpected character ";
                    exc.push_back(c);
                    throw std::runtime_error(exc);
                }
                break;
            case "Z":
            case "S":
                if (isspace(c)) {
                    state = "H";
                } else {
                    std::string exc = "Unexpected character ";
                    exc.push_back(c);
                    throw std::runtime_error(exc);
                }
                break;
            case "A":
                lexem.push_back(c);
                if ((c == 'i') || (c == 'j') || (c == 'k')) {
                   state = "AZ";
                } else if ((c == 's') || (c == 't')) {
                   state = "AS";
                } else if (c == "f") {
                   state = "AF";
                } else {
                   std::string exc = "Unexpected character ";
                   exc.push_back(c);
                   throw std::runtime_error(exc);
                }
                break;
            case "AZ":
            case "AS":
                if (isspace(c)) {
                    state = "H";
                    if (state == "AZ") {
                        type = LEX_INTARRAY;
                    } else if (state == "AS") {
                        type = LEX_STRINGARRAY;
                    }
                } else if (c == '[') {
                    state = "I";
                    type = LEX_INDEX;
                    lexem.push_back(c);
                } else {
                   std::string exc = "Unexpected character ";
                   exc.push_back(c);
                   throw std::runtime_error(exc);
                }
                break;
            case "I":
                if ((c == 'i') || (c == 'j') || (c == 'k')) {
                    lexem.push_back(c);
                    state = "B";
                } else {
                   std::string exc = "Unexpected character ";
                   exc.push_back(c);
                   throw std::runtime_error(exc);
                }
                break;
            case "B":
                if (c == ']') {
                    lexem.push_back(c);
                    state = "H";
                } else {
                   std::string exc = "Unexpected character ";
                   exc.push_back(c);
                   throw std::runtime_error(exc);
                }
                break;
            case "AF":
                if (isspace(c)) {
                    type = ARRAYOFFUNCTION;
                    state = "H";
                } else if ((c == 'i') || (c == 'j') || (c == 'k') || (c == 's') || (c == 't')) {
                    lexem.push_back(c);
                    state = "FP";
                } else if (c == 'a') {
                    lexem.push_back(c);
                    state = "FRA";
                } else {
                   std::string exc = "Unexpected character ";
                   exc.push_back(c);
                   throw std::runtime_error(exc);
                }
                break;
            case "FRA":
                if ((c == 'i') || (c == 'j') || (c == 'k') || (c == 's') || (c == 't')) {
                    lexem.push_back(c);
                    state = "AF";
                } else if ( c != 'a') {
                   std::string exc = "Unexpected character ";
                   exc.push_back(c);
                   throw std::runtime_error(exc);
                }
                break;
            case "FP":
                if (c == '[') {
                    lexem.push_back(c);
                    type = INDEXINARRAY;
                    state = "I";
                } else if ((c == 'i') || (c == 'j') || (c == 'k') || (c == 's') || (c == 't')) {
                    lexem.push_back(c);
                } else if ({
                   std::string exc = "Unexpected character ";
                   exc.push_back(c);
                   throw std::runtime_error(exc);
                }
                break;
            case "FP":
                if ((c == 'i') || (c == 'j') || (c == 'k') || (c == 's') || (c == 't')) {
